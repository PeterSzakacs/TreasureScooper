-- Not yet implemented --



Všetky pozície sú určené vzhľadom na ľavý dolný roh obrazovky.

Herná mapa je rozdelená na obdĺžniky s výškou = offsetY a šírkou = offsetX. Pohyb rúry je realizovaný vždy po jednej bunke a aj väčšina objektov herného sveta majú súradnice, ktoré odpovedajú násobkom offsetX a offsetY (výnimkou v prípade horizontálnych súradníc sú nepriatelia, aby vznikol dojem, že sa pohybujú pomalšie).

Pohyb rúry je realizovaný prostredníctvom operácií nad zásobníkom, kde push() znamená krok v istom smere, kým pop() znamená krok smerom vzad. Nakoľko elementy rúry sú segmenty, ktoré obsahujú iba horizontálnu a vertikálnu súradnicu ako aj typ (kvôli vykresľovaniu na obrazovku) tak nie je možné požiť volanie typu push(Direction.RIGHT) na posun doprava, ale je potrebné ten segment na základe želaného smeru vypočítať. Aby sa nemusel študent zapodievať tým, aby ďalľí segment vypočítaval ručne (a navyše aby nevznikali nesúvislé segmenty rúry pri vykresľovaní) poskytujeme v rámci objektu hráča aj metódu calculateNextSegment(Direction dir) pre výpočet segmentu na základe želaného smeru.

Študent v rámci hráča má možnosť uchovávať referencie na vlastné členské premenné a pomocou nich aj pomocou nadtriedy má prístup k nasledujúcim objektom a ich metódam: 





TreasureScooper: 
-- objekt herného sveta, ktorý zároveň vykresľuje herný svet --

public int getWidth()
-- vráti šírku herného sveta --

public int getHeight()
-- vráti výšku herného sveta --

public int getOffsetX()
-- vráti šírku jednej bunky (offsetX) herného sveta --

public int getOffsetY()
-- vráti výšku jednej bunky (offsetY) herného sveta --

public int getInitX()
-- vráti začiatočnú horizontálnu pozíciu zbernej rúry --

public int getInitY()
-- vráti začiatočnú vertikálnu pozíciu zbernej rúry --

public TunnelCell getStartCell()
-- vráti bunku ktorá predstavuje počiatočnú pozíciu hráča (hlavice rúry) --

HorizontalTunnel getTunnelByYCoordinate(int y)
-- vráti horizontálny tunel ktorého vertikálna súradnica je v rozsahu od (y/offsetY) po (y/offsetY + offsetY) 
alebo null, ak na danej vertikálnej súradnici nie je žiaden tunel --

public boolean intersects(Actor ActorA, Actor ActorB)
-- vráti hodnotu true ak dvaja hráči sa pretínajú (ich súradnice sa lížia maximálne o offsetX resp. offsetY), inak false --

public int getRemainingNuggetsCount()
-- vráti zostávajúci počet kusov zlata v rámci celej hry --









AbstractPlayer:

public void push(PipeSegment segment)
-- pridá segment rúry na za hlavicu rúry a posunie hlavicu rúry implicitne špecifikovaným smerom --

public PipeSegment pop()
-- odoberie segment rúry za hlavicou rúry a vráti hlavicu rúry o bunku naspäť, odkiaľ pôvodne prišla --

public PipeSegment top()
-- vráti segment tesne za hlavicou rúry --

public boolean isEmpty()
-- zistí, či zásobník segmentov rúry je prázdny (či je hlavica rúry na počiatočnej pozícii) --

public PipeSegment getSegmentFromBottom(int offsetFromBottom)
-- získa segment rúry podľa posunutia od spodku zásobníka (teda n-tý segment od začiatku rúry) --

public PipeSegment calculateNextSegment(Direction)
-- pomocná metóda, vypočíta a vráti segment rúry, ktorý sa musí vložiť za hlavicu, pokiaľ ju chceme posunúť daným smerom --

public List<PipeSegment> getSegmentByCriteria(Predicate<PipeSegment> searchCriteria)
-- získa zoznam segmentov, ktoré vyhovujú šepcifikovaným kritériám (s výhodou sa tu dajú použiť lambda výrazy v Jave) --


public boolean isWall(Direction dir)
-- zistí či v danom smere od hlavice je stena --

public TunnelCell getCurrentPosition()
-- vráti referenciu na bunku podzemnej chodby, kde sa v súčasnosti nachádza hlava --

public HorizontalTunnel getCurrentTunnel()
-- vráti referenciu na objekt horizontálneho tunela, v ktorom sa v súčasnosti nachádza hlavica alebo null, ak sa hlavica nachádza v prepojovacom tuneli --


public int getScore()
-- vráti aktuálne skóre z nazbieraných kusov zlata ako aj zo zničených nepriateľov --

public int getHealth()
-- vráti číslo od 0 do 100 (percentá) reprezentujúce celistvosť resp. nepoškodenosť rúry -- 

public boolean repairPipe(int byHowMuch)
-- opraví namieste prípadné poškodenie rúry o počet percent z celkovej celistvosti špecifikovaných v posunutom parametri --
-- oprava rúry však zráža konečné skóre (aktuálne sa zráža 5 bodov zo skóre za každý navrátené percento celistvosti rúry) --  


public int getHeadX()
-- vráti horizontálnu súradnicu hlavice rúry --

public int getHeadY()
-- vráti vertikálnu súradnicu hlavice rúry --

public Direction getCurrentHeadOrientation()
-- vráti aktuálnu orientáciu (otočenie) hlavice rúry --







PipeSegment implements Actor:

-- segment (úsek) zbernej rúry pohybujúcej sa v podzemí a zároveň prvok zásobníka --

public int getX()
-- vráti horizontálnu súradnicu daného segmentu --
public int getY()
-- vráti vertikálnu súradnicu daného segmentu --
public SegmentType getSegmentType()
-- vráti typ daného segmentu (pozri nnižšie) --







HorizontalTunnel:

-- Predstavuje súvislú podzemnú chodbu v horizontálnom smere --
-- Zároveň len v horizontálnych chodbách je možné aby boli v jednotlvých bunkách prítomné kusy zlata --
-- Toto je zároveň priestor, kde sa pohybujú nepriatelia --

public int getX()
-- vráti horizontálnu pozíciu tunela (horizontálnu pozíciu najľavejšej bunky tunela) --

public int getY()
-- vráti vertikálnu pozíciu tunela --

public int getWidth()
-- vráti šírku tunela v podobe počtu buniek tvoriacich tunel --

public List<TunnelCell> getEntrances()
-- vráti zoznam všetkých buniek v tuneli, ktoré sú vstupom do daného tunela zvrchu --

public List<TunnelCell> getExits()
-- vráti zoznam všetkých buniek v tuneli, ktoré sú výstupom z daného tunela do tunela umiestneného nižšie --

public TunnelCell getNearestEntrance(int x)
-- vráti najbližší vstup do príslušného tunela z hľadiska uvedenej horizontálnej súradnice --

public TunnelCell getNearestExit(int x)
-- vráti najbližší výstup z daného tunela do tunela pod ním z hľadiska uvedenej horizontálnej súradnice --

public int getNuggetCount()
-- vráti počet ostávajúcich kusov zlata v danom tuneli --

public HorizontalTunnel getNextTunnel()
-- vráti referenciu na objekt horizontálneho tunela, ktorý je priamo pod daným tunelom alebo null, ak je daný tunel najhlbším tunelom --

public HorizontalTunnel getPreviousTunnel()
-- vráti referenciu na objekt horizontálneho tunela, ktorý je priamo nad daným tunelom alebo null, ak je daný tunel najbližšie pri povrchu --

public List<Enemy> getEnemyBySearchCriteria(Predicate<Enemy> searchCriteria)
-- vráti zoznam nepriateľov, ktorí spĺňajú kritériá uvedené v predikáte (s výhodou sa tu dajú použiť lambda výrazy v Jave) --
    
    príklad: super.getCurrentTunnel().getEnemyBySearchCriteria( (Enemy e) -> Math.abs(e.getX() - getHeadX()) < 5 * world.getOffsetX() )
        
        -- vráti zoznam nepriateľov v súčasnom tuneli, ktorých horizontálna vzdialenosť od hlavice rúry je menej než 5 buniek -- 






TunnelCell:

-- Reprezentuje jednu konkrétnu bunku podzemnej chodby, kde bunka má šírku offsetX a výšku offsetY --
-- Zároveň môže ale nemusí byť na danej pozícii kus zlata, ktorý je možné pozbierať --
-- Jedna bunka je súčasťou grafu implementovaného pomocou spojkového zoznamu, kde každá bunka obsahuje smerníky na bunky nachádzajúce sa v štyroch smeroch od nej (pokiaľ žiadna bunka nie je v danom smere, tak pre príslušný smer je hodnota susednej bunky rovná null) --

public int getX()
-- vráti horizontálnu súradnicu danej bunky --

public int getY()
-- vráti vertikálnu súradnicu danej bunky --

public TunnelCellType getCellType()
-- vráti typ danej bunky (pozri nižšie) --

public TunnelCell getCellAtDirection(Direction dir)
-- vráti susednú bunku k danej bunke v danom smere, alebo null, ak sa v danom smere nachádza stena --

public boolean hasNugget()
-- vráti true ak sa na danej pozícii nachádza nugget, alebo false ak nie --






Enemy implements Actor:

-- nepriateľ, pohybuje sa sprava doľavaod začiatku po koniec tunela, potom zmizne --
-- ak mu v ceste stojí rúra, nahlodá ju, a vie aj zničiť --

int getX()
-- vráti horizontálnu súradnicu daného nepriateľa --
int getY()
-- vráti vertikálnu súradnicu daného nepriateľa --
Direction getDirection()
-- vráti smer, ktorým sa pohybuje daný nepriateľ (buď LEFT alebo RIGHT) --







Enumeračné typy:

public enum Direction { LEFT, RIGHT, UP, DOWN }
-- vysvetlenie tu dúfam netreba --

public enum PipeSegmentType { 
    VERTICAL,       
    HORIZONTAL, 
    -- rovný úsek rúry vo vertikálnom alebo horizontálnom smere --
    TOP_LEFT, 
    TOP_RIGHT, 
    BOTTOM_LEFT, 
    BOTTOM_RIGHT 
    -- ohnutý segment rúry (pri prechode od vertikálneho segmentu po horizontálny alebo naopak) --
}
-- typ segmentu rúry 

public enum TunnelCellType {
    INTERCONNECT,  -- súčasť vertikálneho prepájacieho tunela medzi dvoma horizontálnymi tunelmi --
                   -- (a jediný typ bunky, na ktorom sa nikdy nenachádza nugget) --
    TUNNEL,        -- súčasť horizontálneho tunela --
    LEFT_EDGE,     -- ľavý okraj horizontálneho tunela --
    RIGHT_EDGE,    -- pravý okraj horizontálneho tunela --
    ENTRANCE,      -- súčasť horizontálneho tunela s prepojením smerom nahor ku ďalšiemu tunelu prípadne ku povrchu --
    EXIT,          -- súčasť horizontálneho tunela s prepojením smerom nadol ku ďalšiemu tunelu --
}
-- typ bunky podzemnej chodby, príklad je na obrázku nižšie --

              |INTERCONNECT|
              |____________|
              |INTERCONNECT|
 _____________|____________|_________________________________________
|LEFT_EDGE   || ENTRANCE   ||  EXIT      ||  TUNNEL    ||RIGHT_EDGE  |
|____________||____________||____________||____________||____________|
                            |INTERCONNECT|
                            |____________|
                            |INTERCONNECT|
                            |____________|












Rozhrania (Interfaces):

Actor:
    metódy:
        int getX(); 
        int getY();
